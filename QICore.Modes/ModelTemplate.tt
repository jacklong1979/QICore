<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="Newtonsoft.Json.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Converters" #>
<#@ output extension=".cs" #>
<#@include file="Manager.ttinclude"#>  
<# var manager = new Manager(Host, GenerationEnvironment, true) { OutputPath = Path.GetDirectoryName(Host.TemplateFile)}; #>
<# var model = new ModelHelper() {}; #>
<#     
    //解决方案目录  
	string solutionsPath = Host.ResolveAssemblyReference("$(SolutionDir)");
	 //当前项目目录
	string projectPath = Host.ResolveAssemblyReference("$(ProjectDir)");
	 //生成的主输出文件的目录（定义形式：驱动器 + 路径）；包括尾部的反斜杠“\”。
	string targetPath = Host.ResolveAssemblyReference("$(TargetDir)");
	var modelJasonPath=$"{projectPath}Models.json";
   
	var modelEntity=model.GetModels(modelJasonPath);
	var outPath=modelEntity.OutPath;
    var nameSpace=modelEntity.NameSpace;
	
#>
//===============================上面是定义变量======================================
 //===循环开始===
 <# if(modelEntity!=null&&modelEntity.Models!=null&&modelEntity.Models.Count>0) 
 {
	foreach(var entity in modelEntity.Models)
	{ #>
	 <# manager.StartBlock(entity.TableName+".cs");  #> 
		using System;	
		using System.IO; 
		namespace <#=modelEntity.NameSpace #> 
		{
			/// <summary>
			/// 数据表实体类：<#=entity.TableName #> 
			/// </summary>
			[Serializable()]
			public class <#=entity.TableName #>
			{    
				/// <summary>
				/// 字段名称
				/// </summary>
				public string Name { get; set; }
				 <#
				 if(entity.Columns!=null&&entity.Columns.Count>0)
				 {
					foreach(var column in entity.Columns)
					{#>
public string <#=column.Name #> { get; set; }
				 <# }}#>
			}    
		 }	 
    <# manager.EndBlock(); #>
	<#}
 }
 #>
 <# manager.Process(true);#>//文件分离


<#+
public class ModelHelper
{
      public ModelEntity GetModels(string jsonPath)
        {
            ModelEntity model =null;
            //读取json文件  
            using (StreamReader sr = new StreamReader(jsonPath))
            {
                try
                {
                    JsonSerializer serializer = new JsonSerializer();
                    serializer.Converters.Add(new JavaScriptDateTimeConverter());
                    serializer.NullValueHandling = NullValueHandling.Ignore;
                    //构建Json.net的读取流  
                    JsonReader reader = new JsonTextReader(sr);
                    //对读取出的Json.net的reader流进行反序列化，并装载到模型中  
                    model = serializer.Deserialize<ModelEntity>(reader);                  
                }
                catch (Exception ex)
                {
                    ex.Message.ToString();
                }
            }
            return model;
        }
}
 public class ModelEntity
    {
        public string OutPath { get; set; }
        public string NameSpace { get; set; }
        public List<Model> Models { get; set; }
    }
    public class Model
    {
        public string TableName { get; set; }
        public List<Column> Columns { get; set; }
    }
    public class Column
    {
        /// <summary>
        /// 字段名称
        /// </summary>
        public string Name { get; set; }
        /// <summary>
        /// 数据类型
        /// </summary>
        public string DataType { get; set; }
        /// <summary>
        /// 长度
        /// </summary>
        public int Length { get; set; }
        /// <summary>
        ///是否是主键
        /// </summary>
        public string IsPrimaryKey { get; set; }
        /// <summary>
        /// 是否只读
        /// </summary>
        public bool ReadOnly { get; set; }
        /// <summary>
        /// 注释【中文说明：前端控件名称:逻辑说明】
        /// </summary>
        public string Comment { get; set; }
    }
#>