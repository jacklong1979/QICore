<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Xml"#>
<#@ assembly name="System.Xml.Linq"#>
<#@ assembly name="System.Data.DataSetExtensions.dll" #>
<#@ assembly name="$(SolutionDir)\lib\Dapper.Dll"  #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Web" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="Dapper" #>
<#@ import namespace="System.Reflection"#>
<#@ import namespace="System.Xml.Linq"#>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ output extension=".cs" #>
<#+
#region 数据库帮助类型
public class DapperHelper
{
    /// <summary>
    /// 数据库连接字符串
    /// </summary>
    private static readonly string connectionString = "";

    /// <summary>
    /// 查询列表
    /// </summary>
    /// <param name="sql">查询的sql</param>
    /// <param name="param">替换参数</param>
    /// <returns></returns>
    public static List<T> Query<T>(string sql, object param)
    {
        using (SqlConnection con = new SqlConnection(connectionString))
        {
            return con.Query<T>(sql, param).ToList();
        }
    }

    /// <summary>
    /// 查询第一个数据
    /// </summary>
    /// <param name="sql"></param>
    /// <param name="param"></param>
    /// <returns></returns>
    public static T QueryFirst<T>(string sql, object param)
    {
        using (SqlConnection con = new SqlConnection(connectionString))
        {
            return con.QueryFirst<T>(sql, param);
        }
    }

    /// <summary>
    /// 查询第一个数据没有返回默认值
    /// </summary>
    /// <param name="sql"></param>
    /// <param name="param"></param>
    /// <returns></returns>
    public static T QueryFirstOrDefault<T>(string sql, object param)
    {
        using (SqlConnection con = new SqlConnection(connectionString))
        {
            return con.QueryFirstOrDefault<T>(sql, param);
        }
    }

    /// <summary>
    /// 查询单条数据
    /// </summary>
    /// <param name="sql"></param>
    /// <param name="param"></param>
    /// <returns></returns>
    public static T QuerySingle<T>(string sql, object param)
    {
        using (SqlConnection con = new SqlConnection(connectionString))
        {
            return con.QuerySingle<T>(sql, param);
        }
    }

    /// <summary>
    /// 查询单条数据没有返回默认值
    /// </summary>
    /// <param name="sql"></param>
    /// <param name="param"></param>
    /// <returns></returns>
    public static T QuerySingleOrDefault<T>(string sql, object param)
    {
        using (SqlConnection con = new SqlConnection(connectionString))
        {
            return con.QuerySingleOrDefault<T>(sql, param);
        }
    }

    /// <summary>
    /// 增删改
    /// </summary>
    /// <param name="sql"></param>
    /// <param name="param"></param>
    /// <returns></returns>
    public static int Execute(string sql, object param)
    {
        using (SqlConnection con = new SqlConnection(connectionString))
        {
            return con.Execute(sql, param);
        }
    }

    /// <summary>
    /// Reader获取数据
    /// </summary>
    /// <param name="sql"></param>
    /// <param name="param"></param>
    /// <returns></returns>
    public static IDataReader ExecuteReader(string sql, object param)
    {
        using (SqlConnection con = new SqlConnection(connectionString))
        {
            return con.ExecuteReader(sql, param);
        }
    }

    /// <summary>
    /// Scalar获取数据
    /// </summary>
    /// <param name="sql"></param>
    /// <param name="param"></param>
    /// <returns></returns>
    public static object ExecuteScalar(string sql, object param)
    {
        using (SqlConnection con = new SqlConnection(connectionString))
        {
            return con.ExecuteScalar(sql, param);
        }
    }

    /// <summary>
    /// Scalar获取数据
    /// </summary>
    /// <param name="sql"></param>
    /// <param name="param"></param>
    /// <returns></returns>
    public static T ExecuteScalarFor<T>(string sql, object param)
    {
        using (SqlConnection con = new SqlConnection(connectionString))
        {
            return con.ExecuteScalar<T>(sql, param);
        }
    }

    /// <summary>
    /// 带参数的存储过程
    /// </summary>
    /// <param name="sql"></param>
    /// <param name="param"></param>
    /// <returns></returns>
    public static List<T> ExecutePro<T>(string proc, object param)
    {
        using (SqlConnection con = new SqlConnection(connectionString))
        {
            List<T> list = con.Query<T>(proc,
                param,
                null,
                true,
                null,
                CommandType.StoredProcedure).ToList();
            return list;
        }
    }


    /// <summary>
    /// 事务1 - 全SQL
    /// </summary>
    /// <param name="sqlarr">多条SQL</param>
    /// <param name="param">param</param>
    /// <returns></returns>
    public static int ExecuteTransaction(string[] sqlarr)
    {
        using (SqlConnection con = new SqlConnection(connectionString))
        {
            using (var transaction = con.BeginTransaction())
            {
                try
                {
                    int result = 0;
                    foreach (var sql in sqlarr)
                    {
                        result += con.Execute(sql, null, transaction);
                    }

                    transaction.Commit();
                    return result;
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    return 0;
                }
            }
        }
    }

    /// <summary>
    /// 事务2 - 声明参数
    ///demo:
    ///dic.Add("Insert into Users values (@UserName, @Email, @Address)",
    ///        new { UserName = "jack", Email = "380234234@qq.com", Address = "上海" });
    /// </summary>
    /// <param name="Key">多条SQL</param>
    /// <param name="Value">param</param>
    /// <returns></returns>
    public static int ExecuteTransaction(Dictionary<string, object> dic)
    {
        using (SqlConnection con = new SqlConnection(connectionString))
        {
            using (var transaction = con.BeginTransaction())
            {
                try
                {
                    int result = 0;
                    foreach (var sql in dic)
                    {
                        result += con.Execute(sql.Key, sql.Value, transaction);
                    }

                    transaction.Commit();
                    return result;
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    return 0;
                }
            }
        }
    }
}

#endregion
#>